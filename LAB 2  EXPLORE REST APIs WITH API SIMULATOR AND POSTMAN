Part 1: Explore API Documentation Using the API Simulator

Task preparation and implementation:

Go to the Chromium Web Browser and in the address bar type: library.demo.local .
Click here for API docs, click here to go to the API documentation web page.

GET /books API> Try it out> Execute 
In the Responses section you will see: Curl/Request URL/Code/Response body/Response headers
In the Response body you will see a list of books in JSON format.
Use the curl command in a terminal window.
The GET /books 
Copy the curl command, Paste the contents into the terminal.
List books with their ISBN using the GET /books API. In the Parameters section, the includeISBN parameter select TRUE > Execute.
Curl now includes the parameter for ISBN. Response body has the same list of books as shown previously but now includes the book’s ISBN.

Get a token using the POST /loginViaBasic API.
Click the API POST /loginViaBasic > Try it out > Execute.
A Sign in box will prompt you for a username and password. Enter the following information and click Sign in:
• Username: cisco
• Password: Cisco123!
The token will be displayed in the Response body. Select the information between the quotes
Click the Authorize button. The Available authorizations dialogue box will appear.
Paste the token after Value and click Authorize. Notice the Name is X-API-KEY. 

Add books using the POST /books API.
Click the API POST /books > Click Try it out. > Modify the id, title and author and Click Execute.
A Code of 200 means the post was a success. You should see the book you added in the Response body along with a new id. 

List books using the GET /books API.
Click the GET /books > Try it out > Execute.
Under Server response in the Response body, you will now see new book you added. 

List a specific book using the GET /books{id} API.
Click the GET /books{id} > Try it out >  Parameters, enter 4 for the required id.> Click Execute. Notice the information provided by Curl and Request URL.

Delete a specific book using the DELETE /books{id} API.
Click the DELETE /books{id} > Try it out> Parameters, enter 4.> Execute.
Verify that the delete was successful in the Server response. 

List books using the GET /books API.
Click the GET /books> Try it out>Execute.
Under Server response in the Response body, you will no longer see the book with id or 4.

Task troubleshooting:

Add books using the POST /books API
If you got a 401 code, check the Response body text. Most likely you received an “error”: “Invalid API key” response. This is because you did not enter all the characters for your API key. Or possibly, you add an unnecessary space.
You can verify the books were added to the Our Books Return to the School Library tab in your browser (http://library.demo.local) and refresh the page. Be careful not to close the School Library API tab. If you do, then you will need to reauthenticate.

Task verification:
Check out the screenshots in LAB-2 Foto's

Part 2: Use Postman to Make API Calls to the API Simulator

Task preparation and implementation:
Click the Postman
List the books using the GET /books API.
Click the plus icon “+” to create an Untitled Request. By default, this will be a GET
Click the down arrow next to GET to view the different API operations including GET, POST, and DELETE. 
Return to the School Library API > Under Request URL, Copy the URL http://library.demo.local/api/v1/books
Return to Postman and paste the URL next to GET where it states, “Enter request URL”. > Click Send. 
To verify that the API request was a success, you will now see a response that include the Status code 200 OK in green. Scroll down to the Body section to see the response. Notice that the default is Pretty and json.

Get a Token using the POST /loginViaBasic API.
Click the plus icon “+” to create a new Untitled Request. > Click the down arrow next to GET and select POST.
Return to the School Library API > POST /loginViaBasic API >  Under Request URL, Copy the URL: http://library.demo.local/api/v1/loginViaBasic
Return to Postman and paste the URL next to POST where it states, “Enter request URL”. > Click Authorization > Choose Basic Auth.
For the Username and Password fields, fill in the following:
Username: cisco
Password: Cisco123!
 Click Send.

Add a book using the POST /books API.
Click the plus icon “+” to create an Untitled Request > select POST. >
Return to the School Library API >  POST /books > Under Request URL, Copy the URL : http://library.demo.local/api/v1/books
Return to Postman > paste the URL next to POST >  Click Authorization > In the drop-down list for Type, choose API Key > In the Key field, enter X-API-KEY > Click Send.

Verify the additional book with the Get /books API.
Return to the first GET tab > Click Send.

Use additional parameters with the Get /books API.
Go to the School Library API > GET /books API > Click Try it out > Click includeISBN and select true > Click sortBy and select author > Click Execute.
Return to Postman and go to the first API tab, GET http://library.demo.local/api/v1/books. You will now include some of the parameters from the School Library API web site.

Click Params. You will see under Query Params input boxes for KEY and VALUE. Enter the following information:
Under KEY, enter includeISBN and under Value enter true
Under KEY, enter sortBy and under Value enter author
Click Send.

Task troubleshooting:
If the Request URL is no longer showing, then you probably closed and re-opened the School Library API documentation page and are no longer authenticated. Click Try it out, then Execute, and then re-authenticate with username cisco and password Cisco123!.

Task verification:
To verify that the API request was a success, you will now see a response that include the Status code 200 OK in green.
Check out the screenshots in LAB-2 Foto’s


Part 3: Use Python to Add 100 Books to the API Simulator

Task preparation and implementation:
Open Visual Studio (VS) Code and navigate to the school-library directory.
Open VS Code > Click File > Open Folder…, navigate to the labs/devnet-src/school-library folder, and click OK.

Investigate the libraries used by add100RandomBooks.py program.
Open a terminal window and start Python 3 > 
>>> from faker import Faker
>>> fake = Faker()
>>> fake.name()
Practice generating random data using the faker library.

Enter the following to generate a fake name. 
>>> print('My name is {}.'.format(fake.name()))
My name is Katherine Ross.
>>> print('My name is {} and I wrote "{}" (ISBN {}).'.format(fake.name(),fake.catch_phrase(),fake.isbn13()))
My name is Gary Castaneda and I wrote "Organic incremental neural-net" (ISBN 978-0-669-01935-3).
>>> for i in range(10):
...     print(fake.name())
>>> quit()

Task troubleshooting:
-
Task verification
Check out the screenshots in LAB-2 Foto’s
