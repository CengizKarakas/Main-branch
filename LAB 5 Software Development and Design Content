Part 1: Software Version Control with Git
Lab netacad: Cisco DEVNET 3.3.11
Task preparation and implementation:
Initialize a Git Repository
  devasc@labvm:~$ git config --global user.name "CengizKarakas"
  devasc@labvm:~$ git config --global user.email cengiz.karakas@student.pxl.be
  git config --list
  devasc@labvm:~/labs/devnet-src$ mkdir git-intro
  devasc@labvm:~/labs/devnet-src/git-intro$ git init
Staging and Committing a File in the Repository  
  devasc@labvm:~/labs/devnet-src/git-intro$ echo "I am on my way to passing the Cisco DEVASC exam" > DEVASC.txt
Staging the File 
  devasc@labvm:~/labs/devnet-src/git-intro$ git add DEVASC.txt
Committing a File
  devasc@labvm:~/labs/devnet-src/git-intro$ git commit -m "Committing DEVASC.txt to begin tracking changes"
Viewing the Commit History.
  devasc@labvm:~/labs/devnet-src/git-intro$ git log
Modifying the File and Tracking the Changes
  devasc@labvm:~/labs/devnet-src/git-intro$ echo "I am beginning to understand Git!" >> DEVASC.txt
Verify the change to the repository.
  devasc@labvm:~/labs/devnet-src/git-intro$ git status
Stage the modified file.  
  devasc@labvm:~/labs/devnet-src/git-intro$ git add DEVASC.txt
Commit the staged file. 
  devasc@labvm:~/labs/devnet-src/git-intro$ git commit -m "Added additional line to file"
Verify the changes in the repository.  
  devasc@labvm:~/labs/devnet-src/git-intro$ git diff b5d0f8e 4f5c4c5  #You will need to use your commit IDs

Create a new branch 
  devasc@labvm:~/labs/devnet-src/git-intro$ git branch feature
Checkout the new branch  
  devasc@labvm:~/labs/devnet-src/git-intro$ git checkout feature
Verify current branch  
  devasc@labvm:~/labs/devnet-src/git-intro$ git branch
Stage the modified file in the feature branch.  
  devasc@labvm:~/labs/devnet-src/git-intro$ git add DEVASC.txt
Commit the staged file in the feature branch
  devasc@labvm:~/labs/devnet-src/git-intro$ git commit -m "Added a third line in feature branch"
Checkout the master branch. 
  devasc@labvm:~/labs/devnet-src/git-intro$ git checkout master
Merge file contents from feature to master branch.  
  devasc@labvm:~/labs/devnet-src/git-intro$ git merge feature
Deleting a branch.  
  devasc@labvm:~/labs/devnet-src/git-intro$ git branch
  devasc@labvm:~/labs/devnet-src/git-intro$ git branch -d feature
  devasc@labvm:~/labs/devnet-src/git-intro$ git branch
Modify the contents of DEVASC.txt in the test branch.  
  devasc@labvm:~/labs/devnet-src/git-intro$ sed -i 's/Cisco/NetAcad/' DEVASC.txt
Stage and commit the test branch.  
  devasc@labvm:~/labs/devnet-src/git-intro$ git commit -a -m "Change Cisco to NetAcad"
Checkout the master branch.  
  devasc@labvm:~/labs/devnet-src/git-intro$ git checkout master
Modify the contents of DEVASC.txt in the master branch.
  devasc@labvm:~/labs/devnet-src/git-intro$ sed -i 's/Cisco/DevNet/' DEVASC.txt
Attempt to merge the test branch into the master branch.
  devasc@labvm:~/labs/devnet-src/git-intro$ git merge test
Find the conflict
  cat DEVASC.txt
Manually edit the DEVASC.txt file to remove the conflicting text.
  devasc@labvm:~/labs/devnet-src/git-intro$ vim DEVASC.txt
  Press dd (delete) the irrelevant lines
  Save your changes in vim by pressing ESC (the escape key) and then typing : (colon) followed by wq and press enter.
Stage and commit the master branch.
  devasc@labvm:~/labs/devnet-src/git-intro$ git add DEVASC.txt
  devasc@labvm:~/labs/devnet-src/git-intro$ git commit -a -m "Manually merged from test branch"

Integrating Git with GitHub
Create a Repository.  
  Select the “New repository” button or click on the “+” icon in the upper right corner and select “New repository
  Repository name: devasc-study-team
  Description: Working together to pass the DEVASC exam
  Public/Private: Private
Select: Create repository
Create a new directory devasc-study-team
  devasc@labvm:~/labs/devnet-src/git-intro$ mkdir devasc-study-team
Copy the DEVASC file.
  devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ cp ../DEVASC.txt .
Initialize a new Git repository
  devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git init
  devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git config --list
  devasc@labvm:~$ git config --global user.name "CengizKarakas"
  devasc@labvm:~$ git config --global user.email cengiz.karakas@student.pxl.be
Point Git repository to GitHub repository.
  devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git remote add origin https://github.com/CengizKarakas/devasc-study-team.git
  devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git remote --verbose
Stage and Commit the DEVASC.txt file.  
  devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git add DEVASC.txt
  devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git commit -m "Add DEVASC.txt file to devasc-study-team"
Send (push) the file from Git to GitHub  
  devasc@labvm:~/labs/devnet-src/git-intro/devasc-study-team$ git push origin master
  Username for 'https://github.com': CengizKarakas
  Password for 'https://CengizKarakas@github.com': XXXXXXXX
Verify file on GitHub.
  Go to your GitHub account and under “Repositories” select username/devasc-study-team.
  You should see that the DEVASC.txt file has been added to this GitHub repository. Click on the file to view the contents.

Task troubleshooting:
  If, after entering your username and password, you get a fatal error stating repository is not found, you most likely submitted an incorrect URL. You will need to reverse your git add command with the git remote rm origin command.
  Your email address on Github must match. You can see your e-mail address in the profile settings on Github. Type "git config --list" in Terminal and check the information.
Task verification:
  You can use the following commands for verification.
  git status
  git log
  git config --list
  cat
  git branch
  git diff b510f8e 9f5c4c5 #You will need to use your commit IDs
  
Part 2: Create a Python Unit Test
Lab netacad: Cisco DEVNET 3.5.7
Task preparation and implementation:
All of the command line options for unittest
  devasc@labvm:~/labs/devnet-src$ python3 -m unittest -h
Review the test_data.py file.
  devasc@labvm:~/labs/devnet-src$ more unittest/test_data.py 
  Something is niet correct and we have to find it.
Create the json_search() function that you will be testing.
  devasc@labvm:~/labs/devnet-src/unittest$ python3 recursive_json_search.py 
  Python script is in LAB 5 ScriptsFile.
  devasc@labvm:~/labs/devnet-src/unittest$ python3 test_json_search.py 
   []
  .F.  # Run the test script in its current state to see what results it currently returns. First, you see the empty list. Second, you see the .F. highlighted in the output. A period (.) means a test passed and an F means a test failed.
  devasc@labvm:~/labs/devnet-src/unittest$ python3 -m unittest -v test_json_search
Investigate and correct the first error in the recursive_json_search.py script.
  Move the ret_val=[ ] out of our function in recursive_json_search.py so that the iteration does not overwrite the accumulated list each time.
      def json_search(key,input_object):
        ret_val=[]
  Move the ret_val=[ ] out of our function in recursive_json_search.py so that the iteration does not overwrite the accumulated list each time.
      ret_val=[]
      def json_search(key,input_object):
  devasc@labvm:~/labs/devnet-src/unittest$ python3 recursive_json_search.py  
Run the test again to see if all errors in the script are now fixed.
  Open the test_data.py file and search for issueSummary
  if you search for the value of key2, which is XY&^$#*@!1234%^&, you will only find it at the top where it is defined because it is not in the data JSON object.
Investigate and correct the second error in the recursive_json_search.py script.  
  To resolve this issue, wrap the json_search() function with an outer function. Delete your existing json_search() function and replace with the code in LAB 5 ScriptsFile
  if you search for the value of key2, which is XY&^$#*@!1234%^&, you will only find it at the top where it is defined because it is not in the data JSON object.
  devasc@labvm:~/labs/devnet-src/unittest$ python3 -m unittest
  ...

Task troubleshooting:
  Move the ret_val=[ ] out of our function in recursive_json_search.py so that the iteration does not overwrite the accumulated list each time.
      def json_search(key,input_object):
        ret_val=[]
  Move the ret_val=[ ] out of our function in recursive_json_search.py so that the iteration does not overwrite the accumulated list each time.
      ret_val=[]
      def json_search(key,input_object):
  Run the test again to see if all errors in the script are now fixed.
  Open the test_data.py file and search for issueSummary

Task verification:
  Check out the LAB-5 Foto's

Part 3: Parse Different Data Types with Python
Lab netacad: cisco DEVNET 3.6.6
Task preparation and implementation:
Task troubleshooting:
Task verification:
