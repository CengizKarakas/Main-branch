1.1 Install different tools/packages on Ubuntu DEVASC-LABVM:
Task preparation and implementation: 
Python 3.8 and PIP Installation:
  Open a terminal and Run the following commands:
  sudo apt update
  sudo apt install python3.8 python3-pip
Visual Studio Code Installation:
  Open a terminal and Run the following commands:
  sudo apt update
  sudo apt install software-properties-common apt-transport-https wget
  wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
  sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
  sudo apt update
  sudo apt install code
Jupyter Notebook Installation:
  Open a terminal and Run the following commands:
  sudo apt update
  sudo apt install jupyter-notebook
Python IDLE Installation:
  Open a terminal and Run the following command:
  sudo apt install idle
Task troubleshooting: 
Python 3.8 and PIP:
  Ensure that you have an active internet connection.
  Double-check if the package repositories are properly configured in your system.
  Try updating the package lists by running: sudo apt update.
  If the installation fails, check for any error messages and search for possible solutions online specific to your Ubuntu version.
Visual Studio Code:
  Confirm that you have added the Microsoft GPG key and repository correctly.
  Ensure that your system meets the necessary dependencies for Visual Studio Code.
  If the installation encounters errors, check the error messages and search for solutions or alternative installation methods specific to your Ubuntu version.
Jupyter Notebook:
  Check if you have the necessary dependencies installed, such as Python and its related packages.
  Make sure you have followed the correct installation steps specific to Jupyter Notebook on Ubuntu.
  If encountering issues, search for specific troubleshooting steps related to Jupyter Notebook installation on Ubuntu.
Python IDLE:
  Verify if the idle package is available in the default repositories for your Ubuntu version.
  If the installation fails, check for any error messages and search for possible solutions online specific to your Ubuntu version.
In general, when troubleshooting, carefully review any error messages or logs that are displayed during the installation process. Search for solutions specific to your Ubuntu version and the tools/packages you are installing. Online forums, official documentation, and community resources can often provide valuable insights and troubleshooting tips.
Task verification:
  Verify that all the tools/packages have been successfully installed on Ubuntu DEVASC-LABVM.
  Test each installed tool/package to ensure they are functioning correctly.

1.2 Run geopy and timedate Python Scipts on the DEVASC-LABVM using the tools above (1.1):
Download the ScriptsFile or the scripts it contains to DEVASC-LABVM.
To run the timedate.py, geopy-geocoders_location.py, and location.py scripts on the DEVASC-LABVM, follow these steps:
Open a terminal on the DEVASC-LABVM.
Navigate to the directory where you have saved the Python scripts. For example, if the scripts are located in the "ScriptsFile" folder, use the following command:
  cd ScriptsFile
Run the timedate.py script by executing the following command:
  python3 timedate.py
Run the geopy-geocoders_location.py script by executing the following command:
  python3 geopy-geocoders_location.py
Run the location.py script by executing the following command:
  python3 location.py
Ensure that you have the necessary dependencies installed for the scripts to run successfully. If any errors occur, carefully review the error messages and consider checking if the required libraries are installed or if any additional configurations are needed.
Note: Make sure you have Python 3.8 and PIP installed on the DEVASC-LABVM as mentioned in the previous instructions. If not, please refer to the previous steps to install them.
